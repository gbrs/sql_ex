7.20
-- С датой. Можно, например, наверное, 'YYYY-MM-DD'. Но можно просто: min(time)::date
-- По второму полю идею не совсем понял. Учитывается ли, что клиент мог первый раз заказать и отменить,
-- но в тот же день заказать (и не отменить) еще раз? Считается ли каждый клиент только один раз?
SELECT
  TO_CHAR(time1, 'YYYY/MM/DD') AS date,
  COUNT(order_id) AS first_orders
FROM
  (
    SELECT
      MIN(time) AS time1,
      order_id
    FROM
      user_actions
    WHERE
      user_id IN (
        SELECT
          user_id
        FROM
          user_actions
        WHERE
          action NOT IN ('cancel_order')
        GROUP BY
          user_id
        HAVING
          COUNT(DISTINCT action) = 1
      )
    GROUP BY
      order_id
  ) subquery
GROUP BY
  date
ORDER BY
  date


7.23
-- а случаи, когда у вас в заказе два дорогих товара обрабатываются?
-- Достаточно добавить distinct в основном selectе
with t as (
  Select
    distinct order_id,
    product_ids,
    unnest(product_ids) product_id
  from
    orders
),
t2 as (
  Select
    order_id,
    product_ids,
    product_id
  from
    t
)
Select
  order_id,
  product_ids
from
  t2
where
  product_id in (
    Select
      product_id
    from
      products
    order by
      price desc
    limit
      5
  )
order by


10.13
не совсем понимаю зачем нужен запрос t.
А если 2 разных пользователя одновременно совершат заказ? В вашем случае, вроде, даже три.
select COUNT(*)
from orders
where order_id between 35758 and 35760
group by creation_time
Поэтому скачок от 7 заказов сразу в 10. У двух других пользователей, наверняка, тоже так
select user_id, order_id, action, time,
        coalesce(created_orders, 0)::int created_orders,
        coalesce(canceled_orders, 0)::int canceled_orders,
        coalesce(round(canceled_orders/(created_orders), 2), 0) cancel_rate
from
        (select user_id, order_id, action, time,
                sum(count_order) filter (where action='create_order')
                over (partition by user_id order by time rows between unbounded preceding and current row) created_orders,
                sum(count_order) filter (where action='cancel_order')
                over (partition by user_id order by time rows between unbounded preceding and current row) canceled_orders,
                sum(count_order)
                over (partition by user_id order by time rows between unbounded preceding and unbounded following) sum_user_orders
        from
            (select user_id, order_id, action, time,
                    count(order_id) over (partition by time) count_order
            from user_actions
            order by  user_id, order_id, time) as t) as t2
LIMIT 1000


1.5 opiumbit
Количество заказов вы считаете, вроде, верно - с учетом отмен.
Но первый день пользователя в сервисе надо выяснять *без* их учета.
Я, вроде, использовал WHERE IN, а стоило, как здесь сделать LEFT JOIN.
with
not_cancel as (
SELECT DATE(time) AS date, user_id, order_id
FROM   user_actions
WHERE  order_id not in (SELECT order_id
                        FROM   user_actions
                        WHERE  action = 'cancel_order')),

subquery1 AS (
SELECT date, user_id
FROM (
    SELECT DATE(time) AS date, user_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY time)
    FROM user_actions
    ORDER BY user_id, date
    ) t
WHERE row_number = 1
ORDER BY user_id, date),

subquery2 AS (
SELECT date, user_id, COUNT(order_id)
FROM not_cancel
GROUP BY user_id, date
ORDER BY user_id, date)

SELECT A.date, SUM(coalesce(B.count, 0))
FROM subquery1 AS A
LEFT JOIN subquery2 AS B
ON A.user_id = B.user_id AND A.date = B.date
GROUP BY A.date

1.5  meowbite
with
    t as (
        select
            time::DATE as date,
            count(*) as t1
        from
            user_actions
        where
            order_id in (select order_id from user_actions group by order_id having count(*)<2)
        group by
            time::DATE
    ),

    t1 as (
        select
            date,
            count(user_id) as t2
        from (
            select user_id, min(time::date) as date
            from user_actions
            where order_id in (select order_id from user_actions group by order_id having count(*)<2)
            group by user_id
            ) x
        group
            by date
    ),

    t2 as (
        select
            time::date as date,
            count(distinct order_id) as t3
        from (
            select
                *,
                RANK() over(partition by user_id order by time::date asc) as rnk
            from
                (select
                    time::date,
                    user_id,
                    order_id,
                    count(action) as cnt
                from
                    user_actions
                group by
                    time::date,
                    user_id,
                    order_id
                ) x
            ) x1
        where
            rnk = 1
            and cnt = 1
        group by
            time::date
    )

select
    t.date,
    t1 as orders,
    t2 as first_orders ,
    t3 as new_users_orders ,
    round((t2::decimal/t1::decimal) * 100, 2) as first_orders_share,
    round((t3::decimal/t1::decimal) * 100, 2) as new_users_orders_share
from
    t
    join t1 on t.date=t1.date
    join t2 on t1.date=t2.date
order by
    1

2.2
пользователь делает заказ 28-го, но отменяет его 29-го и больше заказов 29-го не делает.
Он в этом коде не считается, а должен.
with
    t1 as
    (select
        creation_time::date date,
        order_id,
        unnest(product_ids) as product_id
    from orders)

    , t2 as
    (select
        date,
        t1.product_id,
        price,
        order_id,
        user_id
    from t1  -- поскольку дату заказа берем по его созданию, то информация о времени снятия заказа пропадает
    left join products using (product_id)
    left join user_actions using (order_id)
    order by date)

    , t3 as
    (select
        date,
        sum (price) filter (where order_id not in (select order_id from user_actions where action like '%cancel%')) as revenue,
        count (DISTINCT user_id) as users,  -- вот здесь неправильно считаем
        count (DISTINCT order_id) filter (where order_id not in (select order_id from user_actions where action like '%cancel%')) as total_orders,
        count (DISTINCT user_id) filter (where order_id not in (select order_id from user_actions where action like '%cancel%')) as paying_users
    from t2
    group by date)

select
    date,
    round (revenue::decimal/users, 2) as arpu,
    round (revenue::decimal/paying_users,2) as arppu,
    round (revenue::decimal/total_orders,2) as aov
from t3
order by date
