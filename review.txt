1.5
Количество заказов вы считаете, вроде, верно - с учетом отмен.
Но первый день пользователя в сервисе надо выяснять *без* их учета.
Я, вроде, использовал WHERE IN, а стоило, как здесь сделать LEFT JOIN.
with
not_cancel as (
SELECT DATE(time) AS date, user_id, order_id
FROM   user_actions
WHERE  order_id not in (SELECT order_id
                        FROM   user_actions
                        WHERE  action = 'cancel_order')),

subquery1 AS (
SELECT date, user_id
FROM (
    SELECT DATE(time) AS date, user_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY time)
    FROM user_actions
    ORDER BY user_id, date
    ) t
WHERE row_number = 1
ORDER BY user_id, date),

subquery2 AS (
SELECT date, user_id, COUNT(order_id)
FROM not_cancel
GROUP BY user_id, date
ORDER BY user_id, date)

SELECT A.date, SUM(coalesce(B.count, 0))
FROM subquery1 AS A
LEFT JOIN subquery2 AS B
ON A.user_id = B.user_id AND A.date = B.date
GROUP BY A.date

2.2
пользователь делает заказ 28-го, но отменяет его 29-го и больше заказов 29-го не делает.
Он в этом коде не считается, а должен.
with
    t1 as
    (select
        creation_time::date date,
        order_id,
        unnest(product_ids) as product_id
    from orders)

    , t2 as
    (select
        date,
        t1.product_id,
        price,
        order_id,
        user_id
    from t1  -- поскольку дату заказа берем по его созданию, то информация о времени снятия заказа пропадает
    left join products using (product_id)
    left join user_actions using (order_id)
    order by date)

    , t3 as
    (select
        date,
        sum (price) filter (where order_id not in (select order_id from user_actions where action like '%cancel%')) as revenue,
        count (DISTINCT user_id) as users,  -- вот здесь неправильно считаем
        count (DISTINCT order_id) filter (where order_id not in (select order_id from user_actions where action like '%cancel%')) as total_orders,
        count (DISTINCT user_id) filter (where order_id not in (select order_id from user_actions where action like '%cancel%')) as paying_users
    from t2
    group by date)

select
    date,
    round (revenue::decimal/users, 2) as arpu,
    round (revenue::decimal/paying_users,2) as arppu,
    round (revenue::decimal/total_orders,2) as aov
from t3
order by date
