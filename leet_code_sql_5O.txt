Порешать те запросы, которые я решил в пандасе, чтоб не "путались"
'Sorting and Grouping' +


196. Delete Duplicate Emails
DELETE
  p1
FROM
  Person as p1,
  Person as p2
WHERE
  p1.Email = p2.Email
  AND p1.Id > p2.Id;


570. Managers with at Least 5 Direct Reports
SELECT
  e1.name
FROM
  Employee e1
  INNER JOIN Employee e2 ON e2.managerId = e1.id
GROUP BY
  e1.id
HAVING
  COUNT(*) >= 5


595. Big Countries
SELECT
  name,
  population,
  area
FROM
  World
WHERE
  area >= 3000000
  OR population >= 25000000


596. Classes More Than 5 Students
SELECT
  class
FROM
  Courses
GROUP BY
  class
HAVING
  COUNT(student) >= 5


620. Not Boring Movies
SELECT
  *
FROM
  Cinema
WHERE
  id % 2 = 1
  and description != 'boring'
ORDER BY
  rating DESC


1068. Product Sales Analysis I
SELECT
  product_name,
  year,
  price
FROM
  Sales
  INNER JOIN Product USING (product_id)


1148. Article Views I
SELECT
  DISTINCT author_id id
FROM
  Views
WHERE
  author_id = viewer_id
ORDER BY
  id


1280. Students and Examinations
SELECT
  student_id,
  student_name,
  subject_name,
  COUNT(Examinations.subject_name) AS attended_exams
FROM
  Students
  CROSS JOIN Subjects
  LEFT JOIN Examinations USING (student_id, subject_name)
GROUP BY
  student_id,
  student_name,
  subject_name
ORDER BY
  student_id,
  subject_name


1378. Replace Employee ID With The Unique Identifier
SELECT
  unique_id,
  name
FROM
  Employees
  LEFT JOIN EmployeeUNI USING(id)


1527. Patients With a Condition
SELECT
  *
FROM
  Patients
WHERE
  conditions LIKE 'DIAB1%'
  or conditions LIKE '% DIAB1%'


1667. Fix Names in a Table
SELECT
  user_id,
  CONCAT(
      UPPER(SUBSTRING(`name`, 1, 1)),
      LOWER(SUBSTRING(`name` FROM 2))
  ) name
FROM
  Users
ORDER BY
  user_id


1683. Invalid Tweets
SELECT
  tweet_id
FROM
  Tweets
WHERE
  LENGTH(content) > 15


1757. Recyclable and Low Fat Products
SELECT
  product_id
FROM
  Products
WHERE
  low_fats = 'Y'
  AND recyclable = 'Y'


1907. Count Salary Categories
WITH
  category_table as (
    SELECT
      *,
      CASE
        WHEN income < 20000 THEN "Low Salary"
        WHEN income > 50000 THEN "High Salary"
        ELSE "Average Salary"
        END category
    FROM
      Accounts
  ),

  category_count as (
    SELECT
      category,
      COUNT(*)
    FROM
      category_table
    GROUP BY
      category
  ),

  category_name as (
    SELECT
      "Low Salary",
      "Average Salary",
      "High Salary"
      as category
  )


2356. Number of Unique Subjects Taught by Each Teacher
SELECT
  teacher_id,
  COUNT(DISTINCT subject_id) cnt
FROM
  Teacher
GROUP BY
  teacher_id



