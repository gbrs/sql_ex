Порешать те запросы, которые я решил в пандасе, чтоб не "путались"
'Sorting and Grouping' +


176. Second Highest Salary
SELECT
  MAX(salary) SecondHighestSalary
FROM
  Employee
WHERE
  salary != (SELECT MAX(salary) FROM Employee)


180. Consecutive Numbers
SELECT
  DISTINCT l3.num ConsecutiveNums
FROM
  Logs l1
  INNER JOIN Logs l2 ON l1.id = l2.id - 1
  INNER JOIN Logs l3 ON l1.id = l3.id - 2
WHERE
  l1.num = l2.num
  AND l2.num = l3.num


196. Delete Duplicate Emails
DELETE
  p1
FROM
  Person as p1,
  Person as p2
WHERE
  p1.Email = p2.Email
  AND p1.Id > p2.Id;


197. Rising Temperature
SELECT
  w2.id
FROM
  Weather w1
  INNER JOIN Weather w2
    ON w1.recordDate + INTERVAL 1 DAY = w2.recordDate
    AND w2.temperature > w1.temperature


550. Game Play Analysis IV
SELECT
  ROUND(
    SUM(
      IF(
        (player_id, event_date) IN
            (
              SELECT
                player_id,
                ADDDATE(MIN(event_date), 1)
              FROM
                Activity
              GROUP BY
                player_id
            ),
        1,
        0
      )
    )
        / COUNT(DISTINCT player_id)
    , 2
  ) fraction
FROM
  Activity


570. Managers with at Least 5 Direct Reports
SELECT
  e1.name
FROM
  Employee e1
  INNER JOIN Employee e2 ON e2.managerId = e1.id
GROUP BY
  e1.id
HAVING
  COUNT(*) >= 5


577. Employee Bonus
SELECT
  name,
  bonus
FROM
  Employee e
  LEFT JOIN Bonus b USING (empId)
WHERE
  bonus < 1000
  OR bonus IS NULL


584. Find Customer Referee
SELECT
  name
FROM
  Customer
WHERE
  referee_id  != 2
  OR referee_id is NULL


585. Investments in 2016
WITH
  unique_cordinate_users as (
    SELECT
      pid
    FROM
      Insurance
    GROUP BY
      lat, lon
    HAVING
      COUNT(pid) = 1
  ),

  unique_tivs as (
    SELECT
      pid
    FROM
      Insurance
    GROUP BY
      tiv_2015
    HAVING
      COUNT(pid) = 1
  )

SELECT
  ROUND(SUM(tiv_2016), 2) tiv_2016
FROM
  Insurance
WHERE
  pid IN (SELECT * FROM unique_cordinate_users)
  AND pid NOT IN (SELECT * FROM unique_tivs)


595. Big Countries
SELECT
  name,
  population,
  area
FROM
  World
WHERE
  area >= 3000000
  OR population >= 25000000


596. Classes More Than 5 Students
SELECT
  class
FROM
  Courses
GROUP BY
  class
HAVING
  COUNT(student) >= 5


602. Friend Requests II: Who Has the Most Friends
WITH
  friendships AS (
    SELECT requester_id, accepter_id FROM RequestAccepted
    UNION ALL
    SELECT accepter_id, requester_id FROM RequestAccepted
  ),

  friend_nums AS (
    SELECT
      requester_id id,
      COUNT(*) num
    FROM
      friendships
    GROUP BY
      requester_id
  )


SELECT
  *
FROM
  friend_nums
WHERE
  num = (SELECT MAX(num) FROM friend_nums)


610. Triangle Judgement
SELECT
  *,
  CASE
    WHEN (x + y > z) AND (x < y + z) AND (x + z > y)
    THEN 'Yes'
    ELSE 'No'
    END triangle
FROM
  Triangle


619. Biggest Single Number
SELECT
  MAX(num) num
FROM
  (SELECT
    num
  FROM
    MyNumbers
  GROUP BY
    num
  HAVING
    COUNT(*) = 1) t


620. Not Boring Movies
SELECT
  *
FROM
  Cinema
WHERE
  id % 2 = 1
  and description != 'boring'
ORDER BY
  rating DESC


626. Exchange Seats
SELECT
  CASE
    WHEN (SELECT MAX(id) FROM Seat) % 2 = 1 AND id = (SELECT MAX(id) FROM Seat) THEN id
    WHEN id % 2 = 1 THEN id + 1
    ELSE id - 1
    END id,
  student
FROM
  Seat
ORDER BY
  id


1045. Customers Who Bought All Products
WITH distincts AS (
  SELECT
    DISTINCT
    customer_id,
    product_key
  FROM
    Customer
)
SELECT
  customer_id
FROM
  distincts
GROUP BY
  customer_id
HAVING
  COUNT(*) = (SELECT COUNT(*) FROM Product)


1068. Product Sales Analysis I
SELECT
  product_name,
  year,
  price
FROM
  Sales
  INNER JOIN Product USING (product_id)


1070. Product Sales Analysis III
SELECT
  product_id,
  year first_year,
  quantity,
  price
FROM
  Sales
  INNER JOIN Product USING (product_id)
WHERE
  (product_id, year) IN (
      SELECT
        product_id,
        MIN(year)
      FROM
        Sales
      GROUP BY
        product_id
      )


1075. Project Employees I
SELECT
  project_id,
  ROUND(AVG(experience_years), 2) average_years
FROM
  Project
  INNER JOIN Employee USING (employee_id)
GROUP BY
  project_id


1141. User Activity for the Past 30 Days I
SELECT
  activity_date day,
  COUNT(DISTINCT user_id) active_users
FROM
  Activity
WHERE
  activity_date BETWEEN '2019-07-27' - INTERVAL 29 DAY AND '2019-07-27'
GROUP BY
  activity_date


1148. Article Views I
SELECT
  DISTINCT author_id id
FROM
  Views
WHERE
  author_id = viewer_id
ORDER BY
  id


1164. Product Price at a Given Date
WITH
  last_changes AS (
    SELECT
      product_id,
      MAX(change_date) last_change_date
    FROM
      Products
    WHERE
      change_date <= '2019-08-16'
    GROUP BY
      product_id
  ),

  last_prices AS (
    SELECT
      product_id,
      new_price last_price
    FROM
      Products
    WHERE
      (product_id, change_date) IN (SELECT * FROM last_changes)
  ),

  unique_products AS (
    SELECT
      DISTINCT(product_id)
    FROM
      Products
  )

SELECT
  up.product_id,
  COALESCE(last_price, 10) price
FROM
  unique_products up
  LEFT JOIN last_prices USING(product_id)


1174. Immediate Food Delivery II
SELECT
  ROUND(100.0 * SUM(IF(order_date = customer_pref_delivery_date, 1, 0)) / COUNT(*), 2)immediate_percentage
FROM
  Delivery
WHERE
  (customer_id, order_date) IN (
      SELECT
        customer_id,
        MIN(order_date)
      FROM
        Delivery
      GROUP BY
        customer_id
  )


1193. Monthly Transactions I
SELECT
  DATE_FORMAT(trans_date,'%Y-%m') month,
  country,
  COUNT(*) trans_count,
  SUM(IF(state = 'approved', 1, 0)) approved_count,
  SUM(amount) trans_total_amount,
  SUM(IF(state = 'approved', amount, 0)) approved_total_amount
FROM
  Transactions
GROUP BY
  country,
  1


1211. Queries Quality and Percentage
-- MySQL
SELECT
  query_name,
  ROUND(AVG(rating / position), 2) quality,
  ROUND(100.0 * SUM(rating < 3) / COUNT(query_name), 2) poor_query_percentage
FROM
  Queries
GROUP BY
  query_name


1204. Last Person to Fit in the Bus
WITH cum_weights AS (
  SELECT
    person_name,
    SUM(weight) OVER(ORDER BY turn) cum_weight
  FROM
    queue
)

SELECT
  person_name
FROM
  cum_weights
WHERE
  cum_weight <= 1000
ORDER BY
  cum_weight DESC
LIMIT
  1


1211-2. Queries Quality and Percentage
-- PosgreSQL
SELECT
  query_name,
  ROUND(AVG(1.0 * rating / position), 2) quality,
  ROUND(100.0 * COUNT(query_name) FILTER(WHERE rating < 3) / COUNT(query_name), 2) poor_query_percentage
FROM
  Queries
GROUP BY
  query_name


1251. Average Selling Price
SELECT
  p.product_id,
  COALESCE(ROUND(SUM(units * price) / SUM(units), 2), 0) average_price
FROM
  Prices p
  LEFT JOIN UnitsSold us ON (
      p.product_id = us.product_id
      AND purchase_date BETWEEN start_date AND end_date
  )
GROUP BY
  product_id



1280. Students and Examinations
SELECT
  student_id,
  student_name,
  subject_name,
  COUNT(Examinations.subject_name) AS attended_exams
FROM
  Students
  CROSS JOIN Subjects
  LEFT JOIN Examinations USING (student_id, subject_name)
GROUP BY
  student_id,
  student_name,
  subject_name
ORDER BY
  student_id,
  subject_name


1321. Restaurant Growth
WITH daily_amount AS (
  SELECT
    visited_on,
    SUM(amount) amount
  FROM
    Customer
  GROUP BY
    visited_on
)


SELECT
  visited_on,
  SUM(amount) OVER(ROWS BETWEEN 6 preceding and current row) amount,
  ROUND(AVG(amount) OVER(ROWS BETWEEN 6 preceding and current row), 2) average_amount
FROM
  daily_amount
LIMIT
  6, 100


1327. List the Products Ordered in a Period
SELECT
  product_name,
  SUM(unit) unit
FROM
  Products p
  INNER JOIN Orders o USING(product_id)
WHERE
  order_date BETWEEN '2020-02-01' AND '2020-02-29'
GROUP BY
  product_id
HAVING
  SUM(unit) >= 100


1341. Movie Rating
(
  SELECT
    name AS results
  FROM
    MovieRating
    INNER JOIN Users USING(user_id)
  GROUP BY
    user_id
  ORDER BY
    COUNT(*) DESC,
    name
  LIMIT
    1
)

UNION ALL

(
  SELECT
    title AS results
  FROM
    MovieRating
    INNER JOIN Movies USING(movie_id)
  WHERE
    YEAR(created_at) = 2020
    AND MONTH(created_at) = 2
  GROUP BY
    movie_id
  ORDER BY
    AVG(rating) DESC,
    title
  LIMIT
    1
)


1378. Replace Employee ID With The Unique Identifier
SELECT
  unique_id,
  name
FROM
  Employees
  LEFT JOIN EmployeeUNI USING(id)


1484. Group Sold Products By The Date
SELECT
  sell_date,
  COUNT(DISTINCT product) num_sold,
  GROUP_CONCAT(DISTINCT product ORDER BY product) products
FROM
  Activities
GROUP BY
  sell_date
ORDER BY
  sell_date


1517. Find Users With Valid E-Mails
SELECT
  *
FROM
  Users
WHERE
  mail REGEXP '^[A-Za-z]{1}[_0-9a-zA-Z.-]*@leetcode\\.com$'


1527. Patients With a Condition
SELECT
  *
FROM
  Patients
WHERE
  conditions LIKE 'DIAB1%'
  or conditions LIKE '% DIAB1%'


1581. Customer Who Visited but Did Not Make Any Transactions
SELECT
  v.customer_id,
  COUNT(*) count_no_trans
FROM
  Visits v
  LEFT JOIN Transactions t USING(visit_id)
WHERE
  amount IS NULL
GROUP BY
  v.customer_id


1633. Percentage of Users Attended a Contest
SELECT
  contest_id,
  ROUND(100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(*) FROM Users), 2) percentage
FROM
  Users
  INNER JOIN Register USING (user_id)
GROUP BY
  contest_id
ORDER BY
  percentage DESC,
  contest_id


1661. Average Time of Process per Machine
WITH
  start_times as (
    SELECT
      *
    FROM
      Activity
    WHERE
      activity_type = 'start'
  ),

  end_times as (
    SELECT
      *
    FROM
      Activity
    WHERE
      activity_type = 'end'
  )

SELECT
  st.machine_id,
  ROUND(AVG(et.timestamp - st.timestamp), 3) processing_time
FROM
  start_times st
  INNER JOIN end_times et USING (machine_id, process_id)
GROUP BY
  st.machine_id


1661-2. Average Time of Process per Machine
SELECT
  a1.machine_id,
  ROUND(AVG(a2.timestamp - a1.timestamp), 3) processing_time
FROM
  Activity a1
  INNER JOIN Activity a2
    ON a1.machine_id = a2.machine_id
    AND a1.process_id = a2.process_id
    AND a1.activity_type = 'start'
    AND a2.activity_type = 'end'
GROUP BY
  a1.machine_id


1667. Fix Names in a Table
SELECT
  user_id,
  CONCAT(
      UPPER(SUBSTRING(`name`, 1, 1)),
      LOWER(SUBSTRING(`name` FROM 2))
  ) name
FROM
  Users
ORDER BY
  user_id


1683. Invalid Tweets
SELECT
  tweet_id
FROM
  Tweets
WHERE
  LENGTH(content) > 15


1731. The Number of Employees Which Report to Each Employee
SELECT
  e1.employee_id,
  e1.name,
  COUNT(e2.employee_id) reports_count,
  ROUND(AVG(e2.age)) average_age
FROM
  Employees e1
  INNER JOIN Employees e2 ON e1.employee_id = e2.reports_to
GROUP BY
  e1.employee_id
ORDER BY
  e1.employee_id


1757. Recyclable and Low Fat Products
SELECT
  product_id
FROM
  Products
WHERE
  low_fats = 'Y'
  AND recyclable = 'Y'


1789. Primary Department for Each Employee
(
SELECT
  employee_id,
  MAX(department_id) department_id
FROM
  Employee
GROUP BY
  employee_id
HAVING
  COUNT(*) = 1
)

UNION

(
SELECT
  employee_id,
  department_id
FROM
  Employee
WHERE
  primary_flag = 'Y'
)


1907. Count Salary Categories
WITH
  category_table as (
    SELECT
      *,
      CASE
        WHEN income < 20000 THEN 'Low Salary'
        WHEN income > 50000 THEN 'High Salary'
        ELSE 'Average Salary'
        END category
    FROM
      Accounts
  ),

  category_count as (
    SELECT
      category,
      COUNT(*) accounts_count
    FROM
      category_table
    GROUP BY
      category
  ),

  category_name as (
    SELECT 'Low Salary' as category
    UNION
    SELECT 'Average Salary'
    UNION
    SELECT 'High Salary'
  )

SELECT
  category,
  COALESCE(accounts_count, 0) accounts_count
FROM
  category_name
  LEFT JOIN category_count USING (category)


1934. Confirmation Rate
WITH

  full as (
    SELECT
      user_id,
      COUNT(action) full_count
    FROM
      Signups
      LEFT JOIN Confirmations USING(user_id)
    GROUP BY
      user_id
  ),

  conf as (
    SELECT
      user_id,
      COUNT(action) conf_count
    FROM
      Signups
      LEFT JOIN Confirmations USING(user_id)
    WHERE
      action = 'confirmed'
    GROUP BY
      user_id
  )

SELECT
  user_id,
  COALESCE(ROUND(1.0 * conf_count / full_count, 2), 0.00) confirmation_rate
FROM
  full
  LEFT JOIN conf USING(user_id)


1934-2. Confirmation Rate
SELECT
  user_id,
  ROUND(AVG(IF(action = 'confirmed', 1, 0)), 2) confirmation_rate
FROM
  Signups
  LEFT JOIN Confirmations USING(user_id)
GROUP BY
  user_id


1978. Employees Whose Manager Left the Company
SELECT
  employee_id
FROM
  Employees
WHERE
  salary < 30000
  AND manager_id NOT IN (SELECT DISTINCT employee_id FROM Employees)
ORDER BY
  employee_id


1978-2. Employees Whose Manager Left the Company
SELECT
  employee_id
FROM
  Employees e1
WHERE
  salary < 30000
  AND NOT EXISTS (SELECT * FROM Employees e2 WHERE ((e1.manager_id = e2.employee_id) OR (e1.manager_id IS NULL)))
ORDER BY
  employee_id



2356. Number of Unique Subjects Taught by Each Teacher
SELECT
  teacher_id,
  COUNT(DISTINCT subject_id) cnt
FROM
  Teacher
GROUP BY
  teacher_id



