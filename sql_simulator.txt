https://lab.karpov.courses/learning/152/
КУРС «СИМУЛЯТОР SQL» от Карпов коурсес


3.1
select
  name,
  price,
  product_id
from
  products
order by
  name


3.2
select
  courier_id,
  order_id,
  action,
  time
from
  courier_actions
order by
  courier_id,
  action,
  time desc


3.3
select
  order_id,
  creation_time
from
  orders
limit
  50


3.4
select
  name,
  price
from
  products
order by
  price desc
limit
  5


3.5
select
  name product_name,
  price product_price
from
  products
order by
  price desc
limit
  5


3.6
select
  price::VARCHAR
from
  products


3.7
select
  courier_id,
  date_part('year', birth_date) birth_year
from
  couriers
order by
  birth_year


3.8
select
  courier_id,
  coalesce(
    date_part('year', birth_date) :: varchar,
    'unknown'
  ) birth_year
from
  couriers
order by
  birth_year desc


3.9
select
  concat('Заказ № ', order_id, ' создан ', creation_time::date) AS order_info
from
  orders
limit
  200


3.10
select
  name,
  price,
  1.05 * price new_price
from
  products
order by
  new_price desc


3.11
select
  name,
  price,
  round(1.05 * price) new_price
from
  products
order by
  new_price desc


3.12
select
  name,
  price,
  case
    when name != 'икра' and price > 100 then 1.05 * price
    else price
  end AS new_price
from
  products
order by
  new_price desc


3.13
select
  product_id,
  name,
  price,
  price / 120 * 20 tax,
  price - price / 120 * 20 price_before_tax
from
  products
order by
  price_before_tax desc

------------------

4.1
select
  product_id,
  name,
  price
from
  products
where
  price <= 100
order by
  price desc


4.2
select product_id, name
from products
where name LIKE '%чай%'


4.3
select product_id, name
from products
where name LIKE 'с%' and name not LIKE '% %'


4.4
select
  product_id,
  name,
  price,
  '25%' discount,
  0.75 * price price_discounted
from
  products
where
  name LIKE '%чай%'
  and name not LIKE '%чай%гриб%'
  and price > 60


4.5
select
  user_id,
  order_id,
  action,
  time
from
  user_actions
where
  user_id in (170, 200, 230)
  and time between '2022-08-25' and '2022-09-05'
order by
  time desc


4.6
select courier_id, birth_date, sex
from couriers
where birth_date is null
order by courier_id


4.7
select user_id, birth_date
from users
where birth_date is not null and sex = 'male'
order by birth_date desc
limit 50


4.8
select order_id, time
from courier_actions
where courier_id = 100 and action = 'deliver_order'
order by time desc
limit 10


4.9
select
  order_id
from
  user_actions
where
  DATE_PART('year', time) = '2022'
  and DATE_PART('month', time) = '08'
  and action = 'create_order'


4.10
select
  courier_id
from
  couriers
where
  DATE_PART('year', birth_date) between 1990 and 1995


4.11
select user_id, order_id, action, time
from user_actions
where time between '2022-08-25 12:00:00' and '2022-08-25 16:00:00'
order by time desc


4.12
select
    product_id,
    name,
    price,
    round(
        case
            when name in (
                'сахар', 'сухарики', 'сушки', 'семечки',
                'масло льняное', 'виноград', 'масло оливковое',
                'арбуз', 'батон', 'йогурт', 'сливки', 'гречка',
                'овсянка', 'макароны', 'баранина', 'апельсины',
                'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая',
                'мука', 'шпроты', 'сосиски', 'свинина', 'рис',
                'масло кунжутное', 'сгущенка', 'ананас', 'говядина',
                'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки',
                'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины')
            then price / 11
            else price / 6
        end
    , 2) as tax,
  price - round(
                case
                    when name in (
                        'сахар', 'сухарики', 'сушки', 'семечки',
                        'масло льняное', 'виноград', 'масло оливковое',
                        'арбуз', 'батон', 'йогурт', 'сливки', 'гречка',
                        'овсянка', 'макароны', 'баранина', 'апельсины',
                        'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая',
                        'мука', 'шпроты', 'сосиски', 'свинина', 'рис',
                        'масло кунжутное', 'сгущенка', 'ананас', 'говядина',
                        'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки',
                        'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины')
                    then price / 11
                    else price / 6
                end
            , 2) as price_before_tax
from
  products
order by
  price_before_tax desc
___________________________________

5.1
select
  DISTINCT user_id
from
  user_actions
order by
  user_id


5.2
select
  DISTINCT courier_id, order_id
from
  courier_actions
order by
  courier_id, order_id


5.3
select
  max(price) max_price, min(price) min_price
from
  products


5.4
select
  COUNT(DISTINCT user_id) unique_users,
  COUNT(DISTINCT order_id) unique_orders,
  ROUND(COUNT(DISTINCT order_id)::DECIMAL / COUNT(DISTINCT user_id), 2) orders_per_user
from
  user_actions


5.5
select count(courier_id) couriers_count
from couriers
where sex = 'female'


5.6
SELECT
  COUNT(product_ids) orders_count
FROM
  orders
WHERE
  array_length(product_ids, 1) >= 9


5.7
SELECT
  AVG(price) avg_price
FROM
  products
WHERE
  (name LIKE '%чай%'
  OR name LIKE '%кофе%')
  AND name NOT LIKE '%чайный гриб%'
  AND name NOT LIKE '%иван-чай%'


5.8
SELECT
  MIN(AGE(birth_date))::VARCHAR min_age
FROM
  couriers
WHERE
  sex = 'male'


5.9
SELECT
  MAX(AGE(birth_date)) - MIN(AGE(birth_date)) age_diff
FROM
  users
WHERE
  sex = 'male'


5.10
SELECT
  SUM(price) order_price
FROM
  products
WHERE
  name = 'сухарики'
  OR name = 'чипсы'
  OR name = 'энергетический напиток'


5.11
SELECT
  SUM(
    CASE
      WHEN name = 'сухарики' THEN price * 3
      WHEN name = 'чипсы' THEN price * 2
      WHEN name = 'энергетический напиток' THEN price * 1
    END
  ) order_price
FROM
  products


5.12
SELECT
  COUNT(DISTINCT user_id) - COUNT(DISTINCT user_id) FILTER (WHERE action = 'cancel_order') users_count
FROM
  user_actions

------------------------------------------

6.1
SELECT sex, COUNT(*) couriers_count
FROM couriers
GROUP BY sex
ORDER BY couriers_count


6.2
SELECT sex, MAX(DATE_PART('year', AGE(birth_date))) max_age
FROM users
GROUP BY sex
ORDER BY max_age


6.3
SELECT DATE_PART('year', AGE(birth_date)) age, COUNT(*) users_count
FROM users
GROUP BY age
ORDER BY age


6.4
SELECT DATE_PART('year', AGE(birth_date)) age, sex, COUNT(*) users_count
FROM users
WHERE birth_date IS NOT NULL
GROUP BY age, sex
ORDER BY age


6.5
SELECT DATE_TRUNC('month', time) AS month, action, COUNT(*) orders_count
FROM user_actions
GROUP BY month, action
ORDER BY month, action


6.6
SELECT array_length(product_ids, 1) order_size, COUNT(*) orders_count
FROM orders
GROUP BY order_size
ORDER BY order_size


6.7
SELECT array_length(product_ids, 1) order_size, COUNT(*) orders_count
FROM orders
GROUP BY order_size
HAVING COUNT(*) > 5000
ORDER BY order_size


6.8
SELECT courier_id, COUNT(order_id) delivered_orders
FROM courier_actions
WHERE action = 'deliver_order' AND DATE_PART('month', time) = 9
GROUP BY courier_id
ORDER BY delivered_orders DESC
LIMIT 5


6.9
SELECT courier_id, COUNT(order_id) delivered_orders
FROM courier_actions
WHERE action = 'deliver_order' AND DATE_PART('month', time) = 9
GROUP BY courier_id
HAVING COUNT(order_id) = 1
ORDER BY courier_id


6.10
SELECT user_id
FROM user_actions
GROUP BY user_id
HAVING MAX(DATE_PART('month', time)) = 8
ORDER BY user_id


6.11
SELECT
  user_id,
  ROUND(
      COUNT(*) FILTER (WHERE action = 'cancel_order')
          / CAST(COUNT(DISTINCT order_id) AS DECIMAL)
  , 2) AS cancel_rate
FROM
  user_actions
GROUP BY
  user_id
ORDER BY
  cancel_rate DESC


6.12
SELECT
  CASE
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 19 AND 24 THEN '19-24'
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 25 AND 29 THEN '25-29'
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 30 AND 35 THEN '30-35'
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 36 AND 41 THEN '36-41'
  END AS group_age,
  COUNT(user_id) users_count
FROM
  users
WHERE
  DATE_PART('YEAR', AGE(birth_date)) BETWEEN 19 AND 41
GROUP BY
  group_age
ORDER BY
  group_age


------------------------------------

7.1
SELECT
  ROUND(AVG(cnt), 2) orders_avg
FROM
  (
    SELECT
      COUNT(*) cnt
    FROM
      user_actions
    WHERE
      action = 'create_order'
    GROUP BY
      user_id
  ) counts


7.2
WITH counts AS (
  SELECT
    COUNT(*) cnt
  FROM
    user_actions
  WHERE
    action = 'create_order'
  GROUP BY
    user_id
)
SELECT
  ROUND(AVG(cnt), 2) orders_avg
FROM
  counts


7.3
SELECT product_id, name, price
FROM products
WHERE price != (SELECT MIN(price) FROM products)
ORDER BY price DESC


7.4
SELECT product_id, name, price
FROM products
WHERE price >= (SELECT AVG(price) FROM products) + 20
ORDER BY price DESC


7.5
WITH latest AS (
  SELECT MAX(time) mx FROM user_actions
)

SELECT COUNT (DISTINCT user_id) users_count
FROM user_actions
WHERE time BETWEEN
                (SELECT mx FROM latest) - INTERVAL '1 week'
                AND (SELECT mx FROM latest)


7.6
WITH maxi AS (
  SELECT MAX(time) that_day FROM courier_actions
)

SELECT MIN(AGE((SELECT that_day FROM maxi)::DATE, birth_date))::VARCHAR AS min_age
FROM couriers
WHERE sex = 'male'


7.7
WITH canceled_orders AS (
  SELECT order_id FROM user_actions WHERE action = 'cancel_order'
)

SELECT order_id
FROM user_actions
WHERE order_id NOT IN (SELECT * FROM canceled_orders)
ORDER BY order_id


7.8
WITH counters AS (
  SELECT
    COUNT(*) cntr
  FROM
    user_actions
  WHERE
    action = 'create_order'
  GROUP BY
    user_id
),
average AS (
  SELECT
    ROUND(AVG(cntr), 2) aver
  FROM
    counters
)
SELECT
  user_id,
  COUNT(*) orders_count,
  (SELECT * FROM average) orders_avg,
  COUNT(*) - (SELECT * FROM average) orders_diff
FROM
  user_actions
WHERE
  action = 'create_order'
GROUP BY
  user_id
ORDER BY
  user_id


7.9
WITH last_order_id AS (
  SELECT order_id
  FROM courier_actions
  WHERE action = 'deliver_order'
  ORDER BY time DESC
  LIMIT 100
)

SELECT order_id, product_ids
FROM orders
WHERE order_id IN (SELECT order_id FROM last_order_id)
ORDER BY order_id


7.10
WITH actions AS (
  SELECT courier_id, count(*) cnt
  FROM courier_actions
  WHERE time >= '2022-09-01'
  GROUP BY courier_id
)

SELECT courier_id, birth_date, sex
FROM couriers
WHERE courier_id IN (SELECT courier_id FROM actions WHERE cnt > 50)
ORDER BY courier_id


7.11
WITH average_price AS (
  SELECT
    ROUND(AVG(price), 2)
  FROM
    products
)
SELECT
  product_id,
  name,
  price,
  CASE
    WHEN price >= (SELECT * FROM average_price) + 50
    THEN 0.85 * price
    WHEN price <= (SELECT * FROM average_price) - 50
    THEN 0.9 * price
    ELSE price
  END AS new_price
FROM
  products
ORDER BY
  price DESC


7.12
SELECT creation_time, order_id, product_ids, UNNEST(product_ids) product_id
FROM orders
LIMIT 100


7.13
SELECT UNNEST(product_ids) product_id, COUNT(*) times_purchased
FROM orders
GROUP BY product_id
ORDER BY times_purchased DESC
LIMIT 10


7.14
WITH
  goods AS (
    SELECT order_id, product_ids, UNNEST(product_ids) product_id
    FROM orders
  ),

  expensive AS (
    SELECT product_id
    FROM products
    ORDER BY price DESC
    LIMIT 5
  )

SELECT DISTINCT order_id, product_ids
FROM goods
WHERE product_id IN (SELECT product_id  FROM expensive)
ORDER BY order_id


7.15
WITH
  last_times AS (
    SELECT MAX(time) last_time
    FROM user_actions
  ),

  ages AS (
    SELECT
      user_id,
      DATE_PART('YEAR', AGE((SELECT last_time FROM last_times), birth_date)) AS age
    FROM users
  ),

  average_age AS (
    SELECT ROUND(AVG(age)) avg_age
    FROM ages
  )

SELECT
  user_id,
  COALESCE (age, (SELECT avg_age FROM average_age)) age
FROM ages
ORDER BY user_id

--------------------------

8.1
SELECT
  ua.user_id user_id_left,
  u.user_id user_id_right,
  order_id,
  time,
  action,
  sex,
  birth_date
FROM
  user_actions ua
  INNER JOIN users u USING(user_id)
ORDER BY
  user_id_left


8.2
SELECT
  COUNT(DISTINCT users.user_id) users_count
FROM
  user_actions
  INNER JOIN users USING(user_id)


8.3
SELECT
  ua.user_id user_id_left,
  u.user_id user_id_right,
  order_id,
  time,
  action,
  sex,
  birth_date
FROM
  user_actions ua
  LEFT JOIN users u USING(user_id)
ORDER BY
  user_id_left


8.4
SELECT
  COUNT(DISTINCT ua.user_id) users_count
FROM
  user_actions ua
  LEFT JOIN users u USING(user_id)


8.5
SELECT
  ua.user_id user_id_left,
  u.user_id user_id_right,
  order_id,
  time,
  action,
  sex,
  birth_date
FROM
  user_actions ua
  LEFT JOIN users u USING(user_id)
WHERE
  u.user_id IS NOT NULL
ORDER BY
  user_id_left


8.6
SELECT
    u.birth_date users_birth_date,
    u.users_count,
    c.birth_date couriers_birth_date,
    c.couriers_count

FROM
    (SELECT birth_date, COUNT(user_id) AS users_count
    FROM users
    WHERE birth_date IS NOT NULL
    GROUP BY birth_date) AS u

    FULL JOIN

    (SELECT birth_date, COUNT(courier_id) AS couriers_count
    FROM couriers
    WHERE birth_date IS NOT NULL
    GROUP BY birth_date) AS c

    USING (birth_date)

ORDER BY
    users_birth_date, couriers_birth_date


8.7
SELECT
    COUNT(*) dates_count
FROM
    (SELECT birth_date
    FROM users
    WHERE birth_date IS NOT NULL

    UNION

    SELECT birth_date
    FROM couriers
    WHERE birth_date IS NOT NULL
    )bd


8.8
SELECT *
FROM
    (SELECT user_id
    FROM users
    LIMIT 100) u

    CROSS JOIN

    (SELECT name
    FROM products) p
ORDER BY
    user_id,
    name


8.9
SELECT
  ua.user_id,
  ord.order_id,
  ord.product_ids
FROM
  user_actions ua
  INNER JOIN
  orders ord
  USING (order_id)
ORDER BY
  ua.user_id,
  ord.order_id


8.10
WITH not_canceled_orders AS(
  SELECT order_id
  FROM user_actions
  WHERE action = 'create_order'

  EXCEPT

  SELECT order_id
  FROM user_actions
  WHERE action = 'cancel_order'
)

SELECT
  ua.user_id,
  ord.order_id,
  ord.product_ids
FROM
  user_actions ua
  INNER JOIN
  orders ord
  ON ua.order_id = ord.order_id
WHERE
  ord.order_id IN (SELECT order_id FROM not_canceled_orders)
ORDER BY
  ua.user_id,
  ord.order_id


8.11
WITH not_canceled_orders AS(
  SELECT order_id
  FROM user_actions
  WHERE action = 'create_order'

  EXCEPT

  SELECT order_id
  FROM user_actions
  WHERE action = 'cancel_order'
)

SELECT
  user_id,
  ROUND(AVG(array_length(product_ids, 1)), 2) avg_order_size
FROM
  (SELECT
    ua.user_id,
    ord.order_id,
    ord.product_ids
  FROM
    user_actions ua
    INNER JOIN
    orders ord
    ON ua.order_id = ord.order_id
  WHERE
    ord.order_id IN (SELECT order_id FROM not_canceled_orders)) delivered_products
GROUP BY
  user_id
ORDER BY
  user_id


8.12
SELECT
  order_id, splited_orders.product_id, price
FROM
  (SELECT order_id, UNNEST(product_ids) product_id
  FROM orders) splited_orders
  JOIN products USING(product_id)
ORDER BY
  order_id, product_id


8.13
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
    LIMIT 5
  ),
  priced_orders AS (
    SELECT
      order_id, t1.product_id, price
    FROM
      (SELECT * FROM splited_orders) t1
      JOIN products USING(product_id)
  )

SELECT
  order_id, SUM(price) order_price
FROM
  priced_orders
GROUP BY
  order_id
ORDER BY
  order_id


8.14
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
  ),
  priced_orders AS (
    SELECT
      order_id, t1.product_id, price
    FROM
      (SELECT * FROM splited_orders) t1
      JOIN products USING(product_id)
  ),
  order_sums AS (
    SELECT
      order_id,
      SUM(price) order_value
    FROM
      priced_orders
    GROUP BY
      order_id
  ),

  not_canceled_orders AS (
    SELECT order_id
    FROM user_actions
    WHERE action = 'create_order'
    EXCEPT
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
  ),
  delivered_products AS(
    SELECT
      ua.user_id,
      ord.order_id,
      ord.product_ids
    FROM
      user_actions ua
      INNER JOIN orders ord USING (order_id)
    WHERE ord.order_id IN (SELECT order_id FROM not_canceled_orders)
  ),
  order_sizes AS (
    SELECT
      user_id,
      order_id,
      array_length(product_ids, 1) order_size
    FROM
      delivered_products
  )

SELECT
  user_id,
  COUNT(order_id) orders_count,
  ROUND(AVG(order_size), 2) avg_order_size,
  SUM(order_value) sum_order_value,
  ROUND(AVG(order_value), 2) avg_order_value,
  MIN(order_value) min_order_value,
  MAX(order_value) max_order_value
FROM
  order_sums
  JOIN order_sizes USING (order_id)
GROUP BY
  user_id
ORDER BY
  user_id


8.15
WITH
  splited_orders AS (
    SELECT DISTINCT order_id, UNNEST(product_ids) product_id
    FROM orders
  ),
  counter AS (
    SELECT product_id, COUNT(*) times_purchased
    FROM splited_orders
    GROUP BY product_id
  )

SELECT name, times_purchased
FROM counter JOIN products USING (product_id)
ORDER BY times_purchased desc
LIMIT 10


8.16
WITH cancel_rates AS (
  SELECT
    user_id,
    ROUND(
        COUNT(*) FILTER (WHERE action = 'cancel_order')
        / CAST(COUNT(*) FILTER (WHERE action = 'create_order') AS DECIMAL)
    , 2) AS cancel_rate
  FROM
    user_actions
  GROUP BY
    user_id
)

SELECT
  COALESCE(sex, 'unknown'),
  ROUND(AVG(cancel_rate), 3) avg_cancel_rate
FROM
  cancel_rates
  LEFT JOIN users USING (user_id)
GROUP BY sex
ORDER BY sex


8.17
SELECT orders.order_id
FROM orders JOIN courier_actions USING (order_id)
ORDER BY time - creation_time DESC
LIMIT 10


8.18
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
  ),
  named_orders AS (
    SELECT order_id, name
    FROM splited_orders
    JOIN products USING (product_id)
  )

SELECT order_id, ARRAY_AGG(name) product_names
FROM named_orders
GROUP BY order_id
ORDER BY order_id


8.19
WITH
  max_orders AS (
    SELECT *
    FROM orders
    WHERE ARRAY_LENGTH(product_ids, 1) = (SELECT MAX(ARRAY_LENGTH(product_ids, 1)) FROM orders)
  ),
  last_times AS (
    SELECT MAX(time)
    FROM user_actions
  )

SELECT
  DISTINCT
  max_orders.order_id,
  users.user_id,
  DATE_PART('YEAR', AGE((SELECT * FROM last_times), users.birth_date)) user_age,
  couriers.courier_id,
  DATE_PART('YEAR', AGE((SELECT * FROM last_times), couriers.birth_date)) courier_age
FROM max_orders
  JOIN user_actions USING (order_id)
  JOIN courier_actions USING (order_id)
  JOIN users USING (user_id)
  JOIN couriers USING (courier_id)
ORDER BY
  order_id


SELECT
  *
FROM orders
  JOIN user_actions USING (order_id)
  JOIN courier_actions USING (order_id)
LIMIT
  10


8.20
WITH
  not_canceled_orders AS (
    SELECT order_id
    FROM user_actions
    WHERE action = 'create_order'
    EXCEPT
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
  ),
  splited_orders AS (
    SELECT DISTINCT order_id, UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id IN (SELECT * FROM not_canceled_orders)
  ),
  named_orders AS (
    SELECT order_id, name
    FROM splited_orders
      JOIN products USING (product_id)
  ),
  pairs AS (
    SELECT
      no.order_id,
      array[no.name, no2.name] pair
    FROM
      named_orders no
      CROSS JOIN named_orders no2
    WHERE no.order_id = no2.order_id
          AND no.name < no2.name
  )


SELECT
  pair,
  COUNT(pair) count_pair
FROM
  pairs
GROUP BY
  pair
ORDER BY
  count_pair DESC,
  pair







